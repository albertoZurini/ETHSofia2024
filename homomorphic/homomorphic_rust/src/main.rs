use num_bigint::BigUint;
use num_bigint::BigInt;
use std::str::FromStr;

fn multiply_big_numbers(num1: &str, num2: &str) -> String {
    let len1 = num1.len();
    let len2 = num2.len();
    let mut result = vec![0; len1 + len2];

    for (i, ch1) in num1.chars().rev().enumerate() {
        for (j, ch2) in num2.chars().rev().enumerate() {
            let digit1 = ch1.to_digit(10).unwrap();
            let digit2 = ch2.to_digit(10).unwrap();
            let product = digit1 * digit2;
            let sum = result[i + j] + product;

            result[i + j] = sum % 10;
            result[i + j + 1] += sum / 10;
        }
    }

    while result.len() > 1 && result.last() == Some(&0) {
        result.pop();
    }

    result.into_iter().rev().map(|d| char::from_digit(d as u32, 10).unwrap()).collect()
}

fn modulo_big_numbers(num: &str, modulus: &str) -> String {
    let mut remainder = String::new();

    for digit in num.chars() {
        remainder.push(digit);
        let mut value: u64 = remainder.parse().unwrap();
        let mod_value: u64 = modulus.parse().unwrap();

        if value >= mod_value {
            value %= mod_value;
            remainder = value.to_string();
        }
    }

    remainder
}


fn main() {
    let num1 = "1234567890123456789012345678901234567890";
    let num2 = "9876543210987654321098765432109876543210";
    let result = multiply_big_numbers(num1, num2);
    println!("Multiplication result: {}", result);

    let big_num = "1234567890123456789012345678901234567890";
    let modulus = "1234567890123456789012345678901234567";
    let mod_result = modulo_big_numbers(big_num, modulus);
    println!("Modulo result: {}", mod_result);
}

fn main2(){
    let n1_str =    "44557107365393899663430167363204089937739717114414644535494886224115510286851544289275565674092720701221115190582082617740763164370488693789006198094696334491831709265389142982505157080076763892648643428128143654315127361640633966696547339237582084718773550777642653707154102585364279453172422963172148894973912226548823320519428489875881209151801365975426774184886190040315237938763256657071833037779797171627916214648525067384969621768087920775931714869391208935734897641115093453888494829814491349762844029853353142985283214346161289223260850948233535404238481570059791311216725112308819551809736180391838533451";
    let n2_str =    "34495899754436824595476824607454748213732989992662009223799042588722243014655001181300267978644036988604147268335006900666564457682015526567402571228241182879727988973215224461801055703679198593796283930542341650500298443247674407538634534013670978340531895322211784222796693145489238185583508966545828014885878109926310732979124645469205938655521018832428214610542258683438763748554768946547866434216161897556428420656444014893835171868868422039596267086247344708154109956606510425736937224182411225682851659987624226375488860292658656181031443273625241159050118675374456648868302735075317354026148560248844521774";
    let n3_str =    "68208864448354009320322901698974875066334390263566204542043780508625580735552328480817475959523881022976099292742721889446123117947081189599426970541799353506044762086881983515581180110308210054190793269770899393962469120013098038857223026962105769267981452631628447275147128119942908258238337596100952930511751062929435162836746229379637154572605071608180845146944624109570018337229082328626519515468494987350678925859655635754952871514496587712448535699096585447475750267351606113682559367422438888050005468662102003791576474043061359391983663963990278757780735090635046373911145651178413979282306662116219520022";
    let nsq_str =   "174092068805169498034520386382293793714664208224317903775112204682651752076189092056579570501179862793228667180020593279382713363204515503270110216581268803494616090876683817361068124748213394659429314035029094684089966088998639427734373189749735536054712523634944396516824805488073220490211051246169108630580851848055099086543279637778446992985772855529536880323009049156208606772666788765206615807162813248627481375713276041305759966115321763068570368334625700454920578838276805979411770224540485218161330812765017475860009339050538842457279723235097815632021256622820830766148982025870180725899251506105568836809";
    let sum_str =   "88473702649305167380191031436593232015763103232225772138342874031200550549170138866271424150157462738886104674054437119690577209760080348466273654688024121978168665402932859448514794974802813234974770287258076699475457292287088151145986652969434303444439861883016290138913647261158728612920117675645239161497729088746082158102536342052214617804488470376321508357301637073835597784766126739244231969416146704780563369734983610216600296384739098770578513381733531263245658421868482556164749914867269616884037188407376253988158633285479008691222041115273891267150617517496802124899371353099949282116072350968278722911";

    let res = multiply_big_numbers(n1_str, n2_str);
    let res2 = modulo_big_numbers(&res, nsq_str);
    //res = multiply_big_numbers(res, n2_str);
    //res = modulo_big_numbers(res, nsq_str);

    println!("{} - {}", res == sum_str, res);

    // println!("{}", BigUint::parse_bytes(n1_str.as_bytes(), 10));

/*
    let n1 : BigUint;
    
    match n1_str.parse::<BigUint>() {
        Ok(n)  => {
            n1 = n;
            println!("{}", n);
        },
        Err(_) => println!("Error")
    }

*/
/*
    let n1 = BigUint::from_str(n1_str);
    let n2 = BigUint::from_str(n2_str);
    let n3 = BigUint::from_str(n3_str);
    let nsq = BigUint::from_str(nsq_str);
    let sum = BigUint::from_str(sum_str);

    let n12 = (n1 * n2) % nsq;
    let n123 = (n12 * n3) % nsq;

    println!(n123 === sum)
*/
}